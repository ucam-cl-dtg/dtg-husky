#! /usr/bin/env python2.7

from fabric.api import *
from fabric.utils import *
import argparse
import getpass

dom0 = 'husky0.dtg.cl.cam.ac.uk'

env.user = "root"

@hosts(dom0)
def rm_vm(name,force):
    """
    Destroy an existing VM.
    """

    name = name.replace('"','\\"')
    
    # Find the uuid of the VM and abort if we don't find exactly 1 result
    uuid = run('xe vm-list name-label="%s" --minimal params=uuid' % (name)).strip()
    if not uuid:
        abort('Failed to find VM with name-label="%s"' % (name))
    uuids = uuid.split(",")
    if len(uuids) != 1:
        abort('Found %d VMs with name-label="%s"' % (len(uuids),name))
    uuid = uuids[0]

    # Check that this domain is deletable
    if force:
        deletable_by = "all"
    else:
        deletable_by = run('xe vm-param-get uuid=%s param-name=other-config param-key=XenCenter.CustomFields.deletable-by' % (uuid)).strip()

    if deletable_by == "none":
        abort('Cannot delete VM - it is set to be not deletable (other-config:XenCenter.CustomFields.deletable-by == "none")')
    elif deletable_by == "owner":
        # Find out the owner of the VM by reading the name-description parameter from xe
        owner = run('xe vm-param-get uuid=%s param-name=other-config param-key=XenCenter.CustomFields.owner' % (uuid)).strip()
        if not owner:
            abort("Cannot delete VM - failed to find owner parameter (other-config:XenCenter.CustomFields.owner) for this VM")
        
        # Ensure that the owner of the VM matches the user running this script
        if getpass.getuser() != owner:
            abort('Cannot delete VM - it is set to be deletable only by its owner (other-config:XenCenter.CustomFields.deletable-by == "owner") and its owner is currently set to %s' % (owner))
    elif deletable_by == "all":
        pass
    else:
        abort("Cannot delete VM - the deletable-by parameter (other-config:XenCenter.CustomFields.deletable-by) has an unrecognised value (%s)" % (deletable_by))

    vdi_uuids = run('xe vbd-list vm-name-label="%s" --minimal params=vdi-uuid' % (name))

    run('xe vm-uninstall vm="%s" force=true' % (name))

    for uuid in vdi_uuids.strip().split(","):
        vdi_check = run('xe vdi-list uuid=%s' % (uuid)).strip()
        if (vdi_check == uuid):
            run('xe vdi-destroy uuid=%s' % (uuid))

if __name__ == '__main__':

    output['running'] = False
    output['stdout'] = False

    parser = argparse.ArgumentParser(description='Destroy a VM on the DTG husky cluster. This script removes the VM and deletes all its storage devices')

    parser.add_argument('name', help='The name of the VM')
    parser.add_argument('--force', action='store_const', const=True, default=False, help='Force delete even if VM is not deleteable by this user (or if the information is not set)')
    parsed_args = vars(parser.parse_args())
    execute(rm_vm, **parsed_args)
