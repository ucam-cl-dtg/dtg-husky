#! /usr/bin/env python2.7

from fabric.api import run, hosts, output, env, execute, settings
from email.mime.text import MIMEText
from jinja2 import Template, Environment
import argparse
import socket
import getpass
import smtplib
import socket
import sys
from time import sleep

DHCP = 'dhcp.dtg.cl.cam.ac.uk'
DOM0 = 'root@husky0.dtg.cl.cam.ac.uk'

# OS
TEMPLATE = '1f0a7087-a59d-8ec1-819c-508ec3b5b2ea'
INSTALLREPO = 'http://www-uxsup.csx.cam.ac.uk/pub/linux/ubuntu'
PRESEEDLOCATION = ('http://git.dtg.cl.cam.ac.uk/?p=husky/preseed.git;'
                   'a=blob_plain;f=puppy-preseed.cfg;hb=HEAD')

# Filesystem
DEFAULTROOTFSSIZE = '8'
DEFAULTDATAFSSIZE = '1'
SR = '53a849fd-d3a0-7857-bb9c-302871a45127'

# Networking
NETWORK = 'e9c52527-767a-6b91-c331-94d9a97f3de9'
DEVICE = '0'

# System
DEFAULTVCPUS = '1'
VCPUS_MAX = '8'
DEFAULTMINMEMORY = '256'
DEFAULTMAXMEMORY = '512'

# Template
TEMPLATENAME = 'DTG-template'

# SSH
SSHUSER = 'root'

# Emails to sys-admin
SYSADMIN_EMAIL = "oc243@cam.ac.uk"
DTG_INFRA_EMAIL = "oc243@cl.cam.ac.uk"

email_body = """
Dear sys-admin,

Please would you be so kind as to create a CNAME for {{ cname }}.dtg with
value {{ puppy }}.dtg.

Thank you


dtg-infra
"""

def valid_ip(address):
    parts = address.split(".")
    if len(parts) != 4:
        return False
    for item in parts:
        if not 0 <= int(item) <= 255:
            return False
    return True


@hosts(DOM0)
def check_name(name):
    duplicate_name = run('xe vm-list name-label=%s' % name).strip()
    if duplicate_name:
        sys.stderr.write('Duplicate VM name: %s. You might wish to use '
                         'cl-dtg-rm-vm.' % name)
        sys.exit(1)


def prepare_vm(mac, uuid, memory, vcpus):
    """
    Assigns a mac address, memory and vcpus to a VM.
    """

    # Give the VM a VIF
    run('xe vif-create network-uuid=%s mac=%s vm-uuid=%s device=%s' %
        (NETWORK, mac, uuid, DEVICE))

    # Give the VM enough memory, and VCPU
    run('xe vm-param-set uuid=%s VCPUs-max=%s' % (uuid, VCPUS_MAX))
    run('xe vm-param-set uuid=%s  VCPUs-at-startup=%s' % (uuid, vcpus))

    run('xe vm-memory-limits-set uuid=%s dynamic-max=%sMiB static-max=%sMiB '
        'static-min=%sMiB dynamic-min=%sMiB' %
        (uuid, memory, memory, DEFAULTMINMEMORY, DEFAULTMINMEMORY))


def new_vm(name, mac, memory, vcpus, root_fs_size, fs_location=SR, **_):
    """
    Create a new VM.
    """

    execute(check_name, name)
    if mac is None:
        mac = next_mac()
    execute(host_build_vm, name, mac, memory, vcpus, root_fs_size, fs_location)


@hosts(DOM0)
def host_build_vm(name, mac, memory, vcpus, root_fs_size, fs_location):
    # Create a VM
    new_vm_id = run('xe vm-install new-name-label=%s '
                    'sr-uuid=%s template-uuid=%s' %
                    (name, fs_location, TEMPLATE))

    # Point VM at install repo
    run('xe vm-param-set uuid=%s other-config:install-repository=%s' %
        (new_vm_id, INSTALLREPO))

    # Remove the first disk. XAPI adds an 8GiB disk to the VM with vm-install
    # and this can't be reduced in size.
    vdi_old_uuid = run(
        'xe vm-disk-list vm=%s |grep uuid | sed -e \'s/.*: //\' '
        '| tail -n 1' % name)
    vbd_uuid = run('xe vbd-list params=uuid vm-uuid=%s --minimal' % new_vm_id)
    run('xe vbd-destroy uuid=%s' % vbd_uuid)
    run('xe vdi-destroy uuid=%s' % vdi_old_uuid)

    # Create new disks
    vdi_a_uuid = run('xe vdi-create sr-uuid=%s virtual-size=%sGiB '
                     'name-label=%s-os type=user' %
                     (fs_location, root_fs_size, name))
    run('xe vbd-create vm-uuid=%s vdi-uuid=%s device=0 bootable=true' %
        (new_vm_id, vdi_a_uuid))

    # Set the preseed file, and pass a hostname, and password hash
    run('xe vm-param-set uuid=%s PV-args=" --quiet console=hvc0 auto=true '
        'url=%s netcfg/get_hostname=%s xen.fifo_events=0"' %
        (new_vm_id, PRESEEDLOCATION, name))

    prepare_vm(mac, new_vm_id, memory, vcpus)

    # Boot the VM, with an answer file
    run('xe vm-start vm=%s' % name)

    # Start a background script in dom0 that waits for installation to
    # complete, then shuts down the VM, and builds a snapshot
    run('nohup ./capture-vm-snapshot.sh %s &' % name)


def request_cname(name, ip):
    template = Template(email_body)
    body = template.render({'cname': name, 'puppy': socket.gethostbyaddr(ip)})
    msg = MIMEText(body)
    msg['To'] = SYSADMIN_EMAIL
    msg['CC'] = DTG_INFRA_EMAIL
    msg['Subject'] = "CNAME for %s" % name
    msg['From'] = DTG_INFRA_EMAIL
    s = smtplib.SMTP('localhost')
    s.sendmail(me, [you], msg.as_string())
    s.quit()

def new_cloned_vm(name, ip, mac, memory, vcpus,
                  root_fs_size, data_size, data_sr, no_cname, **_):
    """
    Build a new VM by cloning the most recent DTG-snapshot.
    This will give a DTG-itised VM, much faster than calling new_vm,
    however the VM uses copy-on-write.
    """
    execute(check_name, name)

    if ip is not None:
        mac = execute(ip_to_mac, ip)
    if mac is None:
        mac = next_mac()
    execute(host_build_cloned_vm, name, mac,
            memory, vcpus, root_fs_size, data_size, data_sr)
    if (not no_cname) and ("test" not in name):
        request_cname()


@hosts(DOM0)
def host_build_cloned_vm(name, mac, memory, vcpus,
                         root_fs_size, data_size, data_sr):
    # Create VM from snapshot
    run('xe vm-clone new-name-label=%s vm=%s' % (name, TEMPLATENAME))
    new_vm_id = run('xe template-list name-label=%s params=uuid --minimal' %
                    name)
    run('xe vm-param-set other-config:XenCenter.CustomFields.owner="%s" '
        'uuid=%s' % (getpass.getuser(), new_vm_id))
    run('xe vm-param-set '
        'other-config:XenCenter.CustomFields.deletable-by="owner" uuid=%s' %
        (new_vm_id))
    run('xe template-param-set is-a-template=false uuid=%s' % new_vm_id)

    vdi = run('xe vbd-list vm-uuid=%s params=vdi-uuid --minimal' % new_vm_id)
    run('xe vdi-param-set name-label=%s uuid=%s' % (name + '-os', vdi))
    if root_fs_size != DEFAULTROOTFSSIZE:
        run('xe vdi-resize uuid=%s disk-size=%sGiB' % (vdi, root_fs_size))

    prepare_vm(mac, new_vm_id, memory, vcpus)

    # Create a /dev/xvdb that can be mounted at /data/local
    if data_size > 0:
        vdi_b_uuid = run('xe vdi-create sr-uuid=%s virtual-size=%sGiB '
                         'name-label=%s-data type=user' %
                         (data_sr, data_size, name))
        run('xe vbd-create vm-uuid=%s vdi-uuid=%s device=1' %
            (new_vm_id, vdi_b_uuid))

    # Add a third disk for swap. We use a new disk rather than a partition
    # to reduce the faff of repartitioning. We can also trash the swap disk
    # trivially

    vdi_c_uuid = run('xe vdi-create sr-uuid=%s virtual-size=%sMiB '
                     'name-label=%s-swap type=user'
                     % (data_sr, memory * 2, name))
    run('xe vbd-create vm-uuid=%s vdi-uuid=%s device=2' %
        (new_vm_id, vdi_c_uuid))

    run('xe vm-start vm=%s' % name)

    # SSH into the new machine, and set the hostname. First wait for the m/c
    # to boot

    ip = ""
    while not valid_ip(ip):
        ip = run('xe vm-param-get param-name=networks uuid=%s | '
                 'sed -e \'s_0/ip: __\' -e \'s/; .*$//\'' % new_vm_id)
        sleep(1)

    dns_name = socket.gethostbyaddr(ip)[0]
    print dns_name

    run('xe vm-param-set name-description="%s" uuid=%s' %
        (dns_name, new_vm_id))

    with settings(warn_only=True):
        while run('ssh -o UserKnownHostsFile=/dev/null -o '
                  'StrictHostKeyChecking=no  %s@%s "sudo sh -c \'echo %s > '
                  '/etc/hostname ; sudo start hostname \'"' %
                  (SSHUSER, dns_name, name)) == '1':
            sleep(1)
    run('nohup ssh -n -f -o UserKnownHostsFile=/dev/null -o '
        'StrictHostKeyChecking=no %s@%s "/etc/rc2.d/S76vm-boot; '
        'cd /etc/puppet-bare; sudo git fetch -f '
        'git://github.com/ucam-cl-dtg/dtg-puppet.git master:master; '
        'nohup sudo bash /etc/puppet-bare/hooks/post-update '
        '>/var/log/puppet/install-log 2>&1"' %
        (SSHUSER, dns_name))


@hosts(DHCP)
def ip_to_mac(ip):
    """
    Convert an IP address to a MAC address by searching our DHCP config.
    """
    if ip == "":
        return ""

    mac = run('grep -B 1 %s /etc/dhcp/dhcpd.hosts | grep ethernet | '
              'sed -e \'s/.*net //\' -e \'s/;//\'' % ip)
    return mac


@hosts(DHCP)
def macs_in_pool():
    return run('grep "hardware ethernet   00:16:3E:E8" /etc/dhcp/dhcpd.hosts | '
               'sed -e \'s/.*ethernet //\' -e \'s/;//\'').upper()


@hosts(DOM0)
def dom0_macs():
    return run(r"(for i in $(xe vm-list is-a-snapshot=false params=uuid --minimal | "
               r"sed 's/,/ /g'); do xe vif-list params=MAC vm-uuid=$i --minimal; "
               r"done) | sed 's/,/\n/g' | tr 'a-z' 'A-Z' | grep '00:16:3E:E8'").upper()


def next_mac():
    """
    Finds a MAC address that is not currently assigned to a VM.
    """
    dhcp_macs = [x.strip()
                 for x in execute(macs_in_pool).values()[0].split("\r\n")]
    assigned_macs = [x.strip()
                     for x in execute(dom0_macs).values()[0].split("\r\n")]
    return (set(dhcp_macs) - set(assigned_macs)).pop()


def main():
    """
    Main function of script.
    """
    output['running'] = False
    output['stdout'] = False
    env.use_ssh_config = True

    parser = argparse.ArgumentParser(
        description='Make a VM on the DTG husky cluster. The resulting VM '
        'will, by the magic of drt24\'s puppet, contain much DTG goodness')

    parser.add_argument('--new-template', action='store_true',
                        help='Build a new template from the Ubuntu repos, and '
                        'apply DTG customisations. The result is stored as a '
                        'template, rather than creating a VM')

    # We don't want both an IP address and MAC
    ip_mac_group = parser.add_mutually_exclusive_group()
    ip_mac_group.add_argument('-i', '--ip',
                              help='The created VM will be given a MAC address'
                              ' that will be offered this value by DHCP')
    ip_mac_group.add_argument(
        '-M', '--mac', help='MAC address to assign the VM\'s VIF')

    # Optional args
    parser.add_argument('-m', '--memory', default=DEFAULTMAXMEMORY,
                        type=int, help='memory (in MB) assigned to VM')
    parser.add_argument('-v', '--vcpus', default=DEFAULTVCPUS,
                        type=int, help='Number of VCPUs')
    parser.add_argument('-r', '--rootfs', dest='root_fs_size',
                        default=DEFAULTROOTFSSIZE, type=int,
                        help='Size of /dev/xvda, the root filesystem (in GB)')
    parser.add_argument('-d', '--datafs', dest='data_size',
                        default=DEFAULTDATAFSSIZE, type=int,
                        help='Size of /dev/xvdb, the data partition, mounted '
                        'on /data/local (in GB)')
    parser.add_argument('-l', '--dataloc', default=SR, dest='data_sr',
                        help='Storage repository to use for '
                        'the data partition')
    parser.add_argument('-c', '--no-cname', default='store_true', help="Don't "
                        "email sys-admin for a CNAME.")

    # Name is required
    parser.add_argument('name', help='The hostname of the VM')

    parsed_args = vars(parser.parse_args())

    if parsed_args['new_template']:
        new_vm(**parsed_args)
    else:
        new_cloned_vm(**parsed_args)


if __name__ == '__main__':
    main()
